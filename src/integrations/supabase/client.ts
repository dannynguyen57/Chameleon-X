// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database, GameSettings } from '@/lib/types';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

console.log('Supabase URL:', supabaseUrl);
console.log('Supabase Anon Key:', supabaseAnonKey ? 'Present' : 'Missing');

if (!supabaseUrl) {
  throw new Error('Missing environment variable: VITE_SUPABASE_URL');
}

if (!supabaseAnonKey) {
  throw new Error('Missing environment variable: VITE_SUPABASE_ANON_KEY');
}

// Create a singleton instance
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

export const supabase = (() => {
  if (!supabaseInstance) {
    supabaseInstance = createClient<Database>(supabaseUrl, supabaseAnonKey, {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
        storageKey: 'chameleon-game-auth'
      },
      realtime: {
        params: {
          eventsPerSecond: 20,
          heartbeatIntervalMs: 500,
          reconnectDelayMs: 500
        }
      },
      db: {
        schema: 'public'
      },
      global: {
        headers: {
          'x-application-name': 'secret-agent-wordsmith',
          'apikey': supabaseAnonKey,
          'Authorization': `Bearer ${supabaseAnonKey}`,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
      },
    });
  }
  return supabaseInstance;
})();

// Add type definitions for RPC functions
declare module '@supabase/supabase-js' {
  interface SupabaseClient {
    rpc(
      fn: 'start_game',
      params?: { room_id: string }
    ): Promise<{ data: void; error: null } | { data: null; error: Error }>;
    rpc(
      fn: 'update_room_settings',
      params?: { room_id: string; new_settings: GameSettings }
    ): Promise<{ data: void; error: null } | { data: null; error: Error }>;
  }
}