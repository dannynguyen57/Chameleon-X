// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { GameState, GameMode, PlayerRole, GameSettings } from '@/lib/types';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

console.log('Supabase URL:', supabaseUrl);
console.log('Supabase Anon Key:', supabaseAnonKey ? 'Present' : 'Missing');

if (!supabaseUrl) {
  throw new Error('Missing environment variable: VITE_SUPABASE_URL');
}

if (!supabaseAnonKey) {
  throw new Error('Missing environment variable: VITE_SUPABASE_ANON_KEY');
}

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  realtime: {
    params: {
      eventsPerSecond: 20
    }
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    }
  }
});

// Add type definitions for RPC functions
declare module '@supabase/supabase-js' {
  interface SupabaseClient {
    rpc(
      fn: 'start_game',
      params?: { room_id: string }
    ): Promise<{ data: void; error: null } | { data: null; error: Error }>;
    rpc(
      fn: 'update_room_settings',
      params?: { room_id: string; new_settings: GameSettings }
    ): Promise<{ data: void; error: null } | { data: null; error: Error }>;
  }
}

export interface Database {
  public: {
    Tables: {
      game_rooms: {
        Row: {
          id: string;
          host_id: string;
          state: GameState;
          round: number;
          created_at: string;
          updated_at: string;
          last_updated: string;
          max_players: number;
          discussion_time: number;
          max_rounds: number;
          game_mode: GameMode;
          team_size: number;
          chaos_mode: boolean;
          time_per_round: number;
          voting_time: number;
          settings: GameSettings;
          category?: string | null;
          secret_word?: string | null;
          chameleon_id?: string | null;
          timer?: number | null;
          current_turn?: number;
          turn_order?: string[];
          round_outcome?: string | null;
          votes_tally?: { [playerId: string]: number } | null;
          revealed_player_id?: string | null;
          revealed_role?: PlayerRole | null;
        };
        Insert: Omit<Database['public']['Tables']['game_rooms']['Row'], 'id' | 'created_at' | 'updated_at'>;
        Update: Partial<Database['public']['Tables']['game_rooms']['Row']>;
      };
      players: {
        Row: {
          id: string;
          name: string;
          room_id: string;
          role: PlayerRole;
          is_host: boolean;
          is_ready: boolean;
          turn_description?: string;
          vote?: string;
          specialAbilityUsed: boolean;
          is_protected?: boolean;
          is_illusionist?: boolean;
          can_see_word?: boolean;
          vote_multiplier?: number;
          revealed_role?: PlayerRole;
          last_active: string;
          last_updated: string;
          special_word?: string;
          team?: number;
        };
        Insert: Omit<Database['public']['Tables']['players']['Row'], 'id' | 'last_active' | 'last_updated'>;
        Update: Partial<Database['public']['Tables']['players']['Row']>;
      };
    };
  };
}